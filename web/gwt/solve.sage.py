

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_p25 = RealNumber('.25'); _sage_const_2 = Integer(2); _sage_const_2048 = Integer(2048); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)

load('coppersmith.sage')

import requests
from urllib.parse import urljoin
import base64
from time import time
import json
import hashlib

SSO_ENDPOINT = os.getenv('SSO_ENDPOINT') or 'https://gwt-sso.winter-challenge.tjcsec.club'
APP_ENDPOINT = os.getenv('APP_ENDPOINT') or 'https://gwt-app.winter-challenge.tjcsec.club'

def get_pubkey():
  r = requests.get(urljoin(SSO_ENDPOINT, '/pubkey'))
  pub = r.json()
  N, e = (bytes_to_int(base64.urlsafe_b64decode(pub[key])) for key in ('n', 'e'))
  return N, e

def bytes_to_int(b):
  return Integer(int.from_bytes(b, 'big'))

def int_to_bytes(i):
  i = int(i)
  return i.to_bytes((i.bit_length()+_sage_const_7 )//_sage_const_8 , 'big')

N, e = get_pubkey()

print('fetched public key')

bounds = (floor(N**_sage_const_p25 ), _sage_const_2 **_sage_const_2048 )
R = Integers(e)
P1 = PolynomialRing(R, names=('k', 's',)); (k, s,) = P1._first_ngens(2)
f = _sage_const_2 *k*((N+_sage_const_1 )//_sage_const_2  - s) + _sage_const_1 
K, S = small_roots(f, bounds)[_sage_const_0 ]

d = (_sage_const_2 *Integer(K)*((N+_sage_const_1 )//_sage_const_2  - Integer(S)) + _sage_const_1 ) // e
print(d)

data = {
  'uid': int(_sage_const_1 ),
  'username': 'ginkoid',
  'iat': int(time()),
}
data = json.dumps(data).encode()
h = hashlib.sha256()
h.update(data)
m = bytes_to_int(h.digest())
sig = power_mod(m, d, N)
sig = int_to_bytes(sig)
token = f'{base64.urlsafe_b64encode(data).decode()}~OMG~GINKOID~{base64.urlsafe_b64encode(sig).decode()}'

print(token)

r = requests.get(APP_ENDPOINT, params={'token': token})

import re
print(re.search(r'flag\{.+\}', r.text).group(_sage_const_0 ))

